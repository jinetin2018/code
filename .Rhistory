#library(wordcloud)  #中文词频数统计包
#library(htmltools)  #安装devtools包准备
#library(devtools)
#library(wordcloud2)  #中文词频数统计包
#library(tm)   #中文词数据挖掘
#library(jiebaR)
options(digits=3)
source('~/Downloads/Untitled.R', encoding = 'GB2312', echo=TRUE)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages("rzmq")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
library(ggplot2)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg))+geom_point()
ggplot(mtcars,aes(x=wt,y=mpg))+geom_abline()
ggplot(mtcars,aes(x=wt,y=mpg))+geom_line()
plot(mtcars$wt,mtcars$mpg)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg))+geom_line()
plot(mtcars$wt,mtcars$mpg)
plot(pressure$temperature,pressure$pressure,type = "l")
points(pressure$temperature,pressure$pressure)
line(pressure$temperature,pressure$pressure/2)
lines(pressure$temperature,pressure$pressure/2)
lines(pressure$temperature,pressure$pressure)
lines(pressure$temperature,pressure$pressure/2,col="red")
qplot(pressure$temperature,pressure$pressure,geom = "line")
ggplot(pressure,aes(x=pressure$temperature,y=pressure$pressure))+geom_line()
ggplot(pressure,aes(x=pressure$temperature,y=pressure$pressure))+geom_line()
ggplot(pressure,aes(x=temperature,y=pressure))+geom_line()
ggplot(pressure,aes(x=temperature,y=pressure))+geom_line()+geom_point()
barplot(BOD$demand)
barplot(table(mtcars$cyl))
qplot(BOD$Time,BOD$demand,geom = "bar",stat = "identity")
qplot(BOD$Time,BOD$demand,geom = "bar",stat = "identity")
install.packages("ggplot")
install.packages("data.table")
install.packages("PACKAGES.rds")
install.packages("ggplot")
install.packages("ggplot")
install.packages("data.table")
library(data.table)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg))+geom_line()
plot(mtcars$wt,mtcars$mpg)
qplot(pressure$temperature,pressure$pressure,geom = "line")
ggplot(pressure,aes(x=temperature,y=pressure))+geom_line()+geom_point()
install.packages("readr")
install.packages("zoo")
install.packages("zoo")
install.packages("readr")
install.packages("xts")
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg))+geom_line()
plot(mtcars$wt,mtcars$mpg)
qplot(pressure$temperature,pressure$pressure,geom = "line")
ggplot(pressure,aes(x=temperature,y=pressure))+geom_line()+geom_point()
barplot(BOD$demand)
barplot(table(mtcars$cyl))
qplot(BOD$Time,BOD$demand,geom = "bar",stat = "identity")
barplot(BOD$demand)
barplot(table(mtcars$cyl))
qplot(BOD$Time,BOD$demand,geom = "bar",stat = "identity")
library(ggplot2)
qplot(mtcars$wt,mtcars$mpg)
qplot(wt,mpg,data=mtcars)
ggplot(mtcars,aes(x=wt,y=mpg))+geom_line()
plot(mtcars$wt,mtcars$mpg)
qplot(pressure$temperature,pressure$pressure,geom = "line")
ggplot(pressure,aes(x=temperature,y=pressure))+geom_line()+geom_point()
barplot(BOD$demand)
barplot(table(mtcars$cyl))
qplot(BOD$Time,BOD$demand,geom = "bar",stat = "identity")
library(ggplot2)
shinyApp(ui = ui, server = server)
hist(mtcars$mpg)
library(ggplot2)
hist(mtcars$mpg)
qplot(mpg,data = mtcars,binwidth=4)
qplot(mpg,data = mtcars,binwidth=2)
qplot(mpg,data = mtcars,binwidth=1)
boxplot(ToothGrowth$supp,ToothGrowth$len)
qplot(ToothGrowth$supp,ToothGrowth$len,geom = "boxplot")
curve(x^3-5*x,from = -4,to = 4)
library(gcookbook)
install.packages("gcookbook")
library(gcookbook)
ggplot(pg_mean,aes(x=group,y=weight))+geom_bar(stat = "identity")
pg_mean(:10)
pg_mean[:10]
pg_mean[1:10]
pg_mean[1:10,:]
pg_mean
str(BOD)
BOD
ggplot(pg_mean,aes(x=group,y=weight))+geom_bar(stat = "identity",fill="lighhtblue",colour="black")
ggplot(pg_mean,aes(x=group,y=weight))+geom_bar(stat = "identity",fill="lightblue",colour="black")
cabbage_exp
ggplot(cabbage_exp,aes(x=Date,y=Weight,fill=Cultivar))+geom_bar(position = "dodge",stat = "identity")
diamonds
diamonds[1:10,]
diamonds[1:3,]
table(diamonds$cut)
ggplot(diamonds,aes(x=cut))+geom_bar()
# 倒入库----------------------
library(ggplot2)
library(ggplot2)   #图形处理
library(dplyr)        #数据处理
library(data.table)
#library(tidyr)
library(lubridate)   #日期快速处理
library(readr)       #快速读取数据
library(magrittr)  #管道操作
library(zoo)    #时间格式预处理
library(xts)    #扩展时间序列,时间格式预处理
library(TTR)
library(quantmod)   #金融数据读取与画图
library(formatR)   #formatR包是一个实用的包，提供了R代码格式化功能，自动设置空格、缩进、换行等代码格式，让代码看起来更友好。
library(readxl)
library("fortunes")  #fortunes库是一个R语言的语录集，截止到2012年4月，一共总结了316条R-help的留言，这些都是R语言智慧的精华。让R语言的后辈使用者，可以更了解R语言的本身，了解R的精神。
library(stringr)
# 1、测试---------------------------
describe()
install.packages("psych")
install.packages("psych")
summarise(diamonds)
diamonds
str(diamonds)
summary(diamonds)
library(psych)
describe(diamonds)
upc
uspopchange
uspopchange[1:3]
uspopchange[1:3,]
head(uspopchange,3)
rank()
rank(uspopchange$Change)
uspopchange$rank<-rank(uspopchange$Change)
uspopchange
head(uspopchange,3)
sort(uspopchange$rank,decreasing = TRUE)
sort(uspopchange,decreasing = TRUE)
sort(uspopchange,decreasing = TRUE)
class(uspopchange)
uspopchange<-data.table(uspopchange)
uspopchange[,-rank]
uspopchange[order(uspopchange$rank)]
uspopchange[-order(uspopchange$rank)]
uspopchange[order(uspopchange$rank)]
uspopchange[order(uspopchange$rank,decreasing = FALSE)]
uspopchange[order(uspopchange$rank,decreasing = TRUE)]
head(setorder(uspopchange,-rank),10)
source('~/Downloads/anaconda_file/test.r', encoding = 'GB2312', echo=TRUE)
p1
summary(p1)
diamonds
library(ggplot2)   #图形处理
library(dplyr)        #数据处理
library(data.table)
#library(tidyr)
library(lubridate)   #日期快速处理
library(readr)       #快速读取数据
library(magrittr)  #管道操作
library(zoo)    #时间格式预处理
library(xts)    #扩展时间序列,时间格式预处理
library(TTR)
library(quantmod)   #金融数据读取与画图
library(formatR)   #formatR包是一个实用的包，提供了R代码格式化功能，自动设置空格、缩进、换行等代码格式，让代码看起来更友好。
library(readxl)
library("fortunes")  #fortunes库是一个R语言的语录集，截止到2012年4月，一共总结了316条R-help的留言，这些都是R语言智慧的精华。让R语言的后辈使用者，可以更了解R语言的本身，了解R的精神。
library(stringr)
diamonds
str(p)
names(p)
p$scales$scales
p$data$mpg
p$data
install.packages("rJava")
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
names(p)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")))
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
install.packages("rzmq")
install.packages("repr")
install.packages("repr")
install.packages("IRkernel")
install.packages("IRkernel")
install.packages("IRdisplay")
install.packages("IRdisplay")
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
nstall.packages(c("curl","xml2","httr","rversions","devtools"))
install.packages(c("curl","xml2","httr","rversions","devtools"))
library("devtools")
install_github("rgbkrk/rzmq")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos')), type = 'source')
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"), repos = c("http://irkernel.github.io/", getOption("repos")), type = "source")
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
IRkernel::installspec()
IRkernel::installspec()
source('~/Downloads/quick_report.r', encoding = 'GB2312', echo=TRUE)
install_github("IRkernel/IRkernel")
install.packages("IRkernel/IRkernel")
install.packages(c("arules", "backports", "BH", "boot", "checkmate", "corrplot", "data.table", "foreign", "git2r", "irlba", "knitr", "Matrix", "mgcv", "mice", "NLP", "openssl", "purrr", "quantmod", "R6", "rJava", "rstudioapi", "scales", "tibble", "tidyr", "TTR", "withr"))
install.packages(c("arules", "backports", "BH", "boot", "checkmate", "corrplot", "data.table", "foreign", "git2r", "irlba", "knitr", "Matrix", "mgcv", "mice", "NLP", "openssl", "purrr", "quantmod", "R6", "rJava", "rstudioapi", "scales", "tibble", "tidyr", "TTR", "withr"))
install.packages(c("arules", "backports", "BH", "boot", "checkmate", "corrplot", "data.table", "foreign", "git2r", "irlba", "knitr", "Matrix", "mgcv", "mice", "NLP", "openssl", "purrr", "quantmod", "R6", "rJava", "rstudioapi", "scales", "tibble", "tidyr", "TTR", "withr"))
contributors()
citation()
df
df
library(ggplot2)   #图形处理
library(dplyr)        #数据处理
library(data.table)
#library(tidyr)
library(lubridate)   #日期快速处理
library(readr)       #快速读取数据
library(magrittr)  #管道操作
library(zoo)    #时间格式预处理
library(xts)    #扩展时间序列,时间格式预处理
library(TTR)
library(quantmod)   #金融数据读取与画图
library(formatR)   #formatR包是一个实用的包，提供了R代码格式化功能，自动设置空格、缩进、换行等代码格式，让代码看起来更友好。
library(readxl)
library("fortunes")  #fortunes库是一个R语言的语录集，截止到2012年4月，一共总结了316条R-help的留言，这些都是R语言智慧的精华。让R语言的后辈使用者，可以更了解R语言的本身，了解R的精神。
library(stringr)
p<- ggplot(diamonds,aes(depth))+xlim(58,68)
p+geom_histogram(aes(y = ..density..),binwidth = 0.1)
p+geom_histogram(aes(y = ..density..),binwidth = 0.1)+facet_grid(cut~.)
p
summary(p)
library(ggplot2)   #图形处理
library(dplyr)        #数据处理
library(data.table)
#library(tidyr)
library(lubridate)   #日期快速处理
library(readr)       #快速读取数据
library(magrittr)  #管道操作
library(zoo)    #时间格式预处理
library(xts)    #扩展时间序列,时间格式预处理
library(TTR)
library(quantmod)   #金融数据读取与画图
library(formatR)   #formatR包是一个实用的包，提供了R代码格式化功能，自动设置空格、缩进、换行等代码格式，让代码看起来更友好。
library(readxl)
library("fortunes")  #fortunes库是一个R语言的语录集，截止到2012年4月，一共总结了316条R-help的留言，这些都是R语言智慧的精华。让R语言的后辈使用者，可以更了解R语言的本身，了解R的精神。
library(stringr)
library(ggplot2)   #图形处理
library(dplyr)        #数据处理
library(data.table)
#library(tidyr)
library(lubridate)   #日期快速处理
library(readr)       #快速读取数据
library(magrittr)  #管道操作
library(zoo)    #时间格式预处理
library(xts)    #扩展时间序列,时间格式预处理
library(TTR)
library(quantmod)   #金融数据读取与画图
library(formatR)   #formatR包是一个实用的包，提供了R代码格式化功能，自动设置空格、缩进、换行等代码格式，让代码看起来更友好。
library(readxl)
library("fortunes")  #fortunes库是一个R语言的语录集，截止到2012年4月，一共总结了316条R-help的留言，这些都是R语言智慧的精华。让R语言的后辈使用者，可以更了解R语言的本身，了解R的精神。
library(stringr)
我 <- 3
显示器 <- 100
我 <- 3
我 <- 345
我 <- data.frame(x=c(1,2,3))
View(我)
我 <- data.frame(长春=c(1,2,3))
View(我)
library(ggplot2)
setwd("~/stock")
#setwd("~/stock")
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
library(scales)
options(stringAsFactors = FALSE)
symbols <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS",
"603288.SS","000423.SZ","000538.SZ","600436.SS")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
symbols <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS",
"603288.SS","000423.SZ","000538.SZ","600436.SS")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
#getSymbols(symbols,src="yahoo",from="2012-01-01")
df <- merge(GSPC$GSPC.Adjusted,HSI$HSI.Adjusted,`000001.SS`$`000001.SS.Adjusted`,
`601318.SS`$`601318.SS.Adjusted`,`600519.SS`$`600519.SS.Adjusted`,
`000651.SZ`$`000651.SZ.Adjusted`,
`000333.SZ`$`000333.SZ.Adjusted`,`000858.SZ`$`000858.SZ.Adjusted`,
`600887.SS`$`600887.SS.Adjusted`,`603993.SS`$`603993.SS.Adjusted`,
`000002.SZ`$`000002.SZ.Adjusted`,`600036.SS`$`600036.SS.Adjusted`,
`600085.SS`$`600085.SS.Adjusted`,`603288.SS`$`603288.SS.Adjusted`,
`000423.SZ`$`000423.SZ.Adjusted`,`000538.SZ`$`000538.SZ.Adjusted`,
`600436.SS`$`600436.SS.Adjusted`)
names(df) <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS","603288.SS",
"000423.SZ","000538.SZ","600436.SS")
head(df)
View(df)
View(df)
library(PerformanceAnalytics)
install.packages("PerformanceAnalytics")
install.packages("xcrun")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
#setwd("~/stock")
library(quantmod)
library(TTR)
#library(PerformanceAnalytics)
library(ggplot2)
library(scales)
options(stringAsFactors = FALSE)
symbols <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS",
"603288.SS","000423.SZ","000538.SZ","600436.SS")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
#getSymbols(symbols,src="yahoo",from="2012-01-01")
df <- merge(GSPC$GSPC.Adjusted,HSI$HSI.Adjusted,`000001.SS`$`000001.SS.Adjusted`,
`601318.SS`$`601318.SS.Adjusted`,`600519.SS`$`600519.SS.Adjusted`,
`000651.SZ`$`000651.SZ.Adjusted`,
`000333.SZ`$`000333.SZ.Adjusted`,`000858.SZ`$`000858.SZ.Adjusted`,
`600887.SS`$`600887.SS.Adjusted`,`603993.SS`$`603993.SS.Adjusted`,
`000002.SZ`$`000002.SZ.Adjusted`,`600036.SS`$`600036.SS.Adjusted`,
`600085.SS`$`600085.SS.Adjusted`,`603288.SS`$`603288.SS.Adjusted`,
`000423.SZ`$`000423.SZ.Adjusted`,`000538.SZ`$`000538.SZ.Adjusted`,
`600436.SS`$`600436.SS.Adjusted`)
names(df) <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS","603288.SS",
"000423.SZ","000538.SZ","600436.SS")
head(df)
#setwd("~/stock")
library(quantmod)
library(TTR)
#library(PerformanceAnalytics)
library(ggplot2)
library(scales)
options(stringAsFactors = FALSE)
suppressWarnings(getSymbols("000001.SS",src = "yahoo",from="2012-01-01"))
suppressWarnings(getSymbols("000001.SS",src = "yahoo",from="2012-01-01"))
symbols <- c("000001.SS")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
View(`000001.SS`)
symbols <- c("GSPC")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
View(GSPC)
symbols <- c("GSPC")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
symbols <- c("^GSPC")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
View(GSPC)
symbols <- c("^GSPC","^HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS",
"603288.SS","000423.SZ","000538.SZ","600436.SS")
#symbols <- c("^GSPC")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
#getSymbols(symbols,src="yahoo",from="2012-01-01")
df <- merge(GSPC$GSPC.Adjusted,HSI$HSI.Adjusted,`000001.SS`$`000001.SS.Adjusted`,
`601318.SS`$`601318.SS.Adjusted`,`600519.SS`$`600519.SS.Adjusted`,
`000651.SZ`$`000651.SZ.Adjusted`,
`000333.SZ`$`000333.SZ.Adjusted`,`000858.SZ`$`000858.SZ.Adjusted`,
`600887.SS`$`600887.SS.Adjusted`,`603993.SS`$`603993.SS.Adjusted`,
`000002.SZ`$`000002.SZ.Adjusted`,`600036.SS`$`600036.SS.Adjusted`,
`600085.SS`$`600085.SS.Adjusted`,`603288.SS`$`603288.SS.Adjusted`,
`000423.SZ`$`000423.SZ.Adjusted`,`000538.SZ`$`000538.SZ.Adjusted`,
`600436.SS`$`600436.SS.Adjusted`)
names(df) <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS","603288.SS",
"000423.SZ","000538.SZ","600436.SS")
head(df)
write.table(SS,"clipboard",sep = ",",quote = TRUE,col.names = TRUE,row.names = FALSE,fileEncoding = "utf-8")
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library(ggplot2)
library(scales)
options(stringAsFactors = FALSE)
symbols <- c("^GSPC","^HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS",
"603288.SS","000423.SZ","000538.SZ","600436.SS")
suppressWarnings(getSymbols(symbols,src = "yahoo",from="2012-01-01"))
#getSymbols(symbols,src="yahoo",from="2012-01-01")
df <- merge(GSPC$GSPC.Adjusted,HSI$HSI.Adjusted,`000001.SS`$`000001.SS.Adjusted`,
`601318.SS`$`601318.SS.Adjusted`,`600519.SS`$`600519.SS.Adjusted`,
`000651.SZ`$`000651.SZ.Adjusted`,
`000333.SZ`$`000333.SZ.Adjusted`,`000858.SZ`$`000858.SZ.Adjusted`,
`600887.SS`$`600887.SS.Adjusted`,`603993.SS`$`603993.SS.Adjusted`,
`000002.SZ`$`000002.SZ.Adjusted`,`600036.SS`$`600036.SS.Adjusted`,
`600085.SS`$`600085.SS.Adjusted`,`603288.SS`$`603288.SS.Adjusted`,
`000423.SZ`$`000423.SZ.Adjusted`,`000538.SZ`$`000538.SZ.Adjusted`,
`600436.SS`$`600436.SS.Adjusted`)
names(df) <- c("GSPC","HSI","000001.SS","601318.SS","600519.SS","000651.SZ","000333.SZ",
"000858.SZ","600887.SS","603993.SS","000002.SZ","600036.SS","600085.SS","603288.SS",
"000423.SZ","000538.SZ","600436.SS")
head(df)
SS <- as.data.frame(`000001.SS`)
SS <- cbind(index(`000001.SS`),SS)
names(SS) <- c("date","open","high","low","close","volume","adjuested_close")
write.table(SS,"clipboard",sep = ",",quote = TRUE,col.names = TRUE,row.names = FALSE,fileEncoding = "utf-8")
library(ggplot2)
ggplot(mtcars,aes(wt,mpg))+geom_point()
data("pressure")
ggplot(pressure,aes(temperature,pressure))+geom_line()
ggplot(pressure,aes(temperature,pressure))+geom_line()+geom_point()
data(BOD)
BOD
ggplot(BOD,aes(Time,demand))+geom_bar()
ggplot(BOD,aes(Time,demand))+geom_bar(stat = "identity")
ggplot(mtcars,aes(factor(cyl)))+geom_bar()
hist(mtcars$mpg)
library(gcookbook)
library(gcookbook)
install.packages("gcookbook")
library(gcookbook)
head(pg_mean)
ggplot(pg_mean,aes(group,weight))+geom_bar()
ggplot(pg_mean,aes(group,weight))+geom_bar(stat = "identity")
ggplot(pg_mean,aes(group,weight))+geom_bar(stat = "stack")
ggplot(pg_mean,aes(group,weight))+geom_bar(stat = "identity")
BOD
ggplot(BOD,aes(Time,demand))+geom_bar(stat = "identity")
ggplot(BOD,aes(factor(Time),demand))+geom_bar(stat = "identity")
ggplot(pg_mean,aes(group,weight))+geom_bar(stat = "identity",fill="lightblue",colour="black")
cabbage_exp
ggplot(cabbage_exp,aes(Date,Weight,fill=Cultivar))+geom_bar(position = "dodge",stat = "identity")
ggplot(cabbage_exp,aes(Date,Weight,fill=Cultivar))+geom_bar(position = "dodge",stat = "bin")
ggplot(cabbage_exp,aes(Date,Weight,fill=Cultivar))+geom_bar(position = "dodge",stat = "identity")
cs <- cabbage_exp[1:5,]
cs
cs <- cabbage_exp
cs
cs$Weight[6] <-NA
cs
ggplot(cs,aes(Date,Weight,fill=Cultivar))+geom_bar(position = "dodge",stat = "identity")
ggplot(cs,aes(Date,Weight,fill=Cultivar))+geom_bar(position = "dodge",stat = "identity",colour="black")
head(diamonds)
str(diamonds)
ggplot(diamonds,aes(cut))+geom_bar()
ggplot(diamonds,aes(depth))+geom_bar()
ggplot(diamonds,aes(depth))+geom_bar()+xlim(55,70)
ggplot(diamonds,aes(depth))+geom_bar()+xlim(58,65)
ggplot(diamonds,aes(depth))+geom_bar()+xlim(58,65)+ylim(500,2000)
ggplot(diamonds,aes(depth))+geom_bar()+xlim(58,65)+ylim(0,2000)
str(diamonds)
summary(diamonds)
dim(diamonds)
uspopchange
str(uspopchange)
upc <- subset(uspopchange,rank(change)>40)
upc <- subset(uspopchange,rank(Change)>40)
upc
rank
upc
ggplot(upc,aes(Abb,Change,fill=Region))+geom_bar(stat = "identity")
library(ggplot2)
library(gcookbook)
ggplot(cabbage_exp,aes(x=Date,Weight,fill=Cultivar))+geom_bar(stat = "identity")
setwd("~/Documents/GitHub/code")
library(ggplot2)
library(gcookbook)
library(gcookbook)
ggplot(PlantGrowth,aes(x=group,y=weight)) + geom_boxplot()
ggplot(PlantGrowth,aes(x=group,y=weight)) + geom_boxplot() + geom_text(aex(y=weight))
ggplot(PlantGrowth,aes(x=group,y=weight)) + geom_boxplot() + geom_text(aex(x=weight))
ggplot(PlantGrowth,aes(x=group,y=weight)) + geom_boxplot() + coord_flip()
setwd("D:/R/github")
library(stringr)
x <- read.table("clipboard",header = TRUE,sep = "\t")
x$地市 <- str_sub(x$名称,,2)
x$地市[x$地市 %in% c("政企","省级","渠道")] <-"长春"
x$地市[x$地市 %in% c("长山","扶余")] <- "松原"
x$市县 <- "市区"
city_name <-c("德惠","九台","农安","双阳","榆树","磐石","舒兰","永吉","桦甸","蛟河","敦化","和龙",
"龙井","图们","汪清","安图","珲春","梨树","双辽","公主岭","伊通","集安","柳河","梅河",
"辉南","通化县","大安","通榆","镇赉","洮南","东辽","东丰","扶余","乾安","长岭","江源",
"临江","抚松","靖宇","长白")
for (data_name in city_name)  {x$市县[str_detect(x$名称,data_name)] <- data_name}
x$级别[str_detect(x$名称,"一级")] <-"一级网格"
x$级别[str_detect(x$名称,"二级")] <-"二级网格"
write.table(x,"test.csv",sep = ",",col.names = TRUE,row.names = FALSE)
